# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 100
    lines: 24

  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  # startup_mode: SimpleFullscreen

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    family: "Fira Mono for Powerline"

    # The `style` can be specified to pick a specific face.
    style: Regular

  # Point size
  size: 16.0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  # use_thin_strokes: true

# Base16 Zenburn 256 - alacritty color config
# elnawe
colors:
  # Default colors
  primary:
    background: '0x1d1d1d'
    foreground: '0xdcdccc'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x383838'
    cursor: '0x7f9f7f'

  # Normal colors
  normal:
    black:   '0x383838'
    red:     '0xdca3a3'
    green:   '0x5f7f5f'
    yellow:  '0xe0cf9f'
    blue:    '0x7cb8bb'
    magenta: '0xdc8cc3'
    cyan:    '0x93e0e3'
    white:   '0xdcdccc'

  # Bright colors
  bright:
    black:   '0x6f6f6f'
    red:     '0xdca3a3'
    green:   '0x5f7f5f'
    yellow:  '0xe0cf9f'
    blue:    '0x7cb8bb'
    magenta: '0xdc8cc3'
    cyan:    '0x93e0e3'
    white:   '0xffffff'

  indexed_colors:
    - { index: 16, color: '0xdfaf8f' }
    - { index: 17, color: '0x000000' }
    - { index: 18, color: '0x404040' }
    - { index: 19, color: '0x606060' }
    - { index: 20, color: '0x808080' }
    - { index: 21, color: '0xc0c0c0' }

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
shell:
  program: /usr/local/bin/fish
  args:
    - --login
    - --interactive
    - --command
    - 'tmux attach 2>/dev/null || tmux -f ~/.config/tmux/tmux.conf'

debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: true

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Debug

  # Print all received window events.
  #print_events: false

  # Record all characters and escape sequences as test data.
  #ref_test: false

#selection:
#  #semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be ntspecified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
  # (Windows, Linux, and BSD only)
  # - { key: V,        mods: Control|Shift, action: Paste            }
  # - { key: C,        mods: Control|Shift, action: Copy             }
  # - { key: Insert,   mods: Shift,         action: PasteSelection   }
  # - { key: Key0,     mods: Control,       action: ResetFontSize    }
  # - { key: Equals,   mods: Control,       action: IncreaseFontSize }
  # - { key: Add,      mods: Control,       action: IncreaseFontSize }
  # - { key: Subtract, mods: Control,       action: DecreaseFontSize }
  # - { key: Minus,    mods: Control,       action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }
  - { key: Return,   mods: Command,       action: ToggleSimpleFullscreen }

  # (macOS only)
  - { key: Key0,   mods: Command,         action: ResetFontSize    }
  - { key: Equals, mods: Command,         action: IncreaseFontSize }
  - { key: Plus,   mods: Command,         action: IncreaseFontSize }
  - { key: Minus,  mods: Command,         action: DecreaseFontSize }
  - { key: K,      mods: Command,         action: ClearHistory     }
  - { key: K,      mods: Command,         chars: "\x0c"            }
  - { key: V,      mods: Command,         action: Paste            }
  - { key: C,      mods: Command,         action: Copy             }
  - { key: H,      mods: Command,         action: Hide             }
  - { key: M,      mods: Command,         action: Minimize         }
  - { key: Q,      mods: Command,         action: Quit             }
  - { key: F,      mods: Command|Control, action: ToggleFullscreen }

  - { key: Paste,                    action: Paste                            }
  - { key: Copy,                     action: Copy                             }
  - { key: L,         mods: Control, action: ClearLogNotice                   }
  - { key: L,         mods: Control, chars: "\x0c"                            }
  - { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  - { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  - { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
  - { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }

  # One-off fix for missing option-as-meta setting.
  # See https://github.com/alacritty/alacritty/issues/62
  - { key: Period,    mods: Alt, chars: "\x1b\x2e" }
  - { key: Semicolon, mods: Alt | Shift, chars: "\x1b\x3a" }
  - { key: E, mods: Alt, chars: "\x1b\x65" }

  #
  # macOS bindings for tmux.
  #
  # Taken from `xxd -psd` command as shown here:
  # https://posts.mksanders.org/simulating-macos-terminal-bindings-in-alacritty
  #

  # New tab.
  - { key: T,        mods: Command,       chars: "\x01\x63" }

  # Close tab.
  - { key: W,        mods: Command,       chars: "\x01\x64" }

  # Move one tab right.
  - { key: RBracket, mods: Command|Shift, chars: "\x01\x6e" }

  # Move one tab left.
  - { key: LBracket, mods: Command|Shift, chars: "\x01\x70" }

  # Move to tab x.
  - { key: Key1,     mods: Command,       chars: "\x01\x31" }
  - { key: Key2,     mods: Command,       chars: "\x01\x32" }
  - { key: Key3,     mods: Command,       chars: "\x01\x33" }
  - { key: Key4,     mods: Command,       chars: "\x01\x34" }
  - { key: Key5,     mods: Command,       chars: "\x01\x35" }
  - { key: Key6,     mods: Command,       chars: "\x01\x36" }
  - { key: Key7,     mods: Command,       chars: "\x01\x37" }
  - { key: Key8,     mods: Command,       chars: "\x01\x38" }
  - { key: Key9,     mods: Command,       chars: "\x01\x39" }

  #  Enter copy mode.
  - { key: Up,       mods: Command,       chars: "\x01\x5b" }
